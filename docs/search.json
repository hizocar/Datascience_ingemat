[
  {
    "objectID": "data_science_ingemat/presentacion.html",
    "href": "data_science_ingemat/presentacion.html",
    "title": "Presentando un proyecto",
    "section": "",
    "text": "Objetivo del Proyecto: Comienza con una visión general del proyecto y sus objetivos. Explica por qué se realizó el proyecto y cuál es su relevancia para la empresa.\n\n\n\nProblema a Resolver: Describe el problema que tu proyecto de ciencia de datos está tratando de resolver. Haz esto de una manera que sea comprensible para personas que no son expertas en el tema, utilizando ejemplos y analogías simples cuando sea posible.\n\n\n\nRecopilación de Datos: Explica cómo y de dónde obtuviste los datos para el proyecto.\n\n\nDescribe cómo se prepararon los datos para el análisis. Puedes mencionar técnicas de limpieza de datos, pero evita entrar en demasiados detalles técnicos.\n\n\n\nDescribe las técnicas y algoritmos que utilizaste para desarrollar el modelo de ciencia de datos. Explica por qué elegiste esos enfoques y cómo se relacionan con el problema que estás tratando de resolver. Intenta mantener la explicación accesible y evita el uso de jerga técnica tanto como sea posible.\n\n\n\n\nInterpretación de Resultados: Presenta los resultados de tu análisis de una manera fácil de entender. Utiliza gráficos y tablas para visualizar los datos y destacar los hallazgos clave. Evita presentar demasiados números crudos; en su lugar, trata de resumir y explicar los resultados de una manera que sea fácil de entender.\n\n\nExplica lo que los resultados significan para el negocio. ¿Qué acciones debería tomar la empresa basándose en estos resultados? ¿Cómo ayudará esto a la empresa a alcanzar sus objetivos?\n\n\n\n\n\n\nResume los hallazgos clave de tu proyecto y cómo estos hallazgos pueden beneficiar a la empresa.\n\n\n\nProporciona recomendaciones para los próximos pasos. ¿Hay otras preguntas que podrían explorarse en el futuro? ¿Cómo puede la empresa implementar los resultados de tu proyecto?\n\n\n\n\nDeja tiempo para preguntas al final de la presentación. Esto da a la audiencia la oportunidad de aclarar cualquier aspecto que no entienda y permite que se realicen preguntas más profundas que pueden no ser adecuadas durante la presentación principal.\nRecuerda, la clave es mantener el lenguaje simple y accesible, y tratar de relacionar todo con los objetivos y necesidades de la empresa. Tu meta es hacer que la audiencia comprenda el valor de tu trabajo, no impresionarlos con jerga técnica."
  },
  {
    "objectID": "data_science_ingemat/presentacion.html#cómo-presentar-un-proyecto-de-ciencias-de-datos",
    "href": "data_science_ingemat/presentacion.html#cómo-presentar-un-proyecto-de-ciencias-de-datos",
    "title": "Presentando un proyecto",
    "section": "",
    "text": "Objetivo del Proyecto: Comienza con una visión general del proyecto y sus objetivos. Explica por qué se realizó el proyecto y cuál es su relevancia para la empresa.\n\n\n\nProblema a Resolver: Describe el problema que tu proyecto de ciencia de datos está tratando de resolver. Haz esto de una manera que sea comprensible para personas que no son expertas en el tema, utilizando ejemplos y analogías simples cuando sea posible.\n\n\n\nRecopilación de Datos: Explica cómo y de dónde obtuviste los datos para el proyecto.\n\n\nDescribe cómo se prepararon los datos para el análisis. Puedes mencionar técnicas de limpieza de datos, pero evita entrar en demasiados detalles técnicos.\n\n\n\nDescribe las técnicas y algoritmos que utilizaste para desarrollar el modelo de ciencia de datos. Explica por qué elegiste esos enfoques y cómo se relacionan con el problema que estás tratando de resolver. Intenta mantener la explicación accesible y evita el uso de jerga técnica tanto como sea posible.\n\n\n\n\nInterpretación de Resultados: Presenta los resultados de tu análisis de una manera fácil de entender. Utiliza gráficos y tablas para visualizar los datos y destacar los hallazgos clave. Evita presentar demasiados números crudos; en su lugar, trata de resumir y explicar los resultados de una manera que sea fácil de entender.\n\n\nExplica lo que los resultados significan para el negocio. ¿Qué acciones debería tomar la empresa basándose en estos resultados? ¿Cómo ayudará esto a la empresa a alcanzar sus objetivos?\n\n\n\n\n\n\nResume los hallazgos clave de tu proyecto y cómo estos hallazgos pueden beneficiar a la empresa.\n\n\n\nProporciona recomendaciones para los próximos pasos. ¿Hay otras preguntas que podrían explorarse en el futuro? ¿Cómo puede la empresa implementar los resultados de tu proyecto?\n\n\n\n\nDeja tiempo para preguntas al final de la presentación. Esto da a la audiencia la oportunidad de aclarar cualquier aspecto que no entienda y permite que se realicen preguntas más profundas que pueden no ser adecuadas durante la presentación principal.\nRecuerda, la clave es mantener el lenguaje simple y accesible, y tratar de relacionar todo con los objetivos y necesidades de la empresa. Tu meta es hacer que la audiencia comprenda el valor de tu trabajo, no impresionarlos con jerga técnica."
  },
  {
    "objectID": "data_science_ingemat/modulo2/proyecto2.html",
    "href": "data_science_ingemat/modulo2/proyecto2.html",
    "title": "Proyecto",
    "section": "",
    "text": "En este proyecto, se espera que apliquen sus conocimientos de series de tiempo y el uso de la biblioteca Prophet para realizar pronósticos. Debe encontrar un conjunto de datos con más de tres años de historia para su análisis.\n\n\n\n\nRealizar un análisis exploratorio de los datos para entender las características de la serie de tiempo.\nPreprocesar los datos si es necesario para prepararlos para Prophet.\nEntrenar un modelo Prophet en los datos y realizar pronósticos.\nEvaluar la precisión de sus pronósticos.\nInterpretar los componentes de su modelo (tendencia, estacionalidad).\n\n\n\n\n\nAsegúrese de dividir sus datos en conjuntos de entrenamiento y prueba para evaluar la precisión de sus pronósticos.\nConsidere la posibilidad de ajustar los hiperparámetros de Prophet para mejorar su modelo.\nRecuerde que Prophet puede manejar datos faltantes, pero debe decidir si imputar estos datos es la mejor opción para su situación.\nLa entrega del proyecto debe realizarse a través de un repositorio de GitHub. Asegúrese de que su proyecto esté bien comentado, para esto use el archivo ReadMe.\nLa fecha límite para la entrega del proyecto es el lunes 31 de julio. Las presentaciones se llevarán a cabo hasta el 5 de agosto.\n\n\n\n\n\nCalidad del análisis exploratorio de datos y las conclusiones extraídas.\nCorrecta aplicación de Prophet y uso de sus funcionalidades.\nPrecisión de los pronósticos.\nInterpretación de los componentes del modelo.\nCalidad de la presentación de sus resultados.\n\n\n\n\n\nAjuste de la flexibilidad de la tendencia con el parámetro changepoint_prior_scale.\nAjuste de la estacionalidad con add_seasonality y seasonality_mode.\nUso de add_country_holidays para incluir efectos de vacaciones.\nUso de make_future_dataframe para generar fechas futuras para pronósticos.\nInterpretación de los componentes del modelo con plot_components."
  },
  {
    "objectID": "data_science_ingemat/modulo2/proyecto2.html#proyecto-de-series-de-tiempo-con-prophet",
    "href": "data_science_ingemat/modulo2/proyecto2.html#proyecto-de-series-de-tiempo-con-prophet",
    "title": "Proyecto",
    "section": "",
    "text": "En este proyecto, se espera que apliquen sus conocimientos de series de tiempo y el uso de la biblioteca Prophet para realizar pronósticos. Debe encontrar un conjunto de datos con más de tres años de historia para su análisis.\n\n\n\n\nRealizar un análisis exploratorio de los datos para entender las características de la serie de tiempo.\nPreprocesar los datos si es necesario para prepararlos para Prophet.\nEntrenar un modelo Prophet en los datos y realizar pronósticos.\nEvaluar la precisión de sus pronósticos.\nInterpretar los componentes de su modelo (tendencia, estacionalidad).\n\n\n\n\n\nAsegúrese de dividir sus datos en conjuntos de entrenamiento y prueba para evaluar la precisión de sus pronósticos.\nConsidere la posibilidad de ajustar los hiperparámetros de Prophet para mejorar su modelo.\nRecuerde que Prophet puede manejar datos faltantes, pero debe decidir si imputar estos datos es la mejor opción para su situación.\nLa entrega del proyecto debe realizarse a través de un repositorio de GitHub. Asegúrese de que su proyecto esté bien comentado, para esto use el archivo ReadMe.\nLa fecha límite para la entrega del proyecto es el lunes 31 de julio. Las presentaciones se llevarán a cabo hasta el 5 de agosto.\n\n\n\n\n\nCalidad del análisis exploratorio de datos y las conclusiones extraídas.\nCorrecta aplicación de Prophet y uso de sus funcionalidades.\nPrecisión de los pronósticos.\nInterpretación de los componentes del modelo.\nCalidad de la presentación de sus resultados.\n\n\n\n\n\nAjuste de la flexibilidad de la tendencia con el parámetro changepoint_prior_scale.\nAjuste de la estacionalidad con add_seasonality y seasonality_mode.\nUso de add_country_holidays para incluir efectos de vacaciones.\nUso de make_future_dataframe para generar fechas futuras para pronósticos.\nInterpretación de los componentes del modelo con plot_components."
  },
  {
    "objectID": "data_science_ingemat/modulo2/proyecto2.html#rúbrica-del-proyecto-de-series-de-tiempo-con-prophet",
    "href": "data_science_ingemat/modulo2/proyecto2.html#rúbrica-del-proyecto-de-series-de-tiempo-con-prophet",
    "title": "Proyecto",
    "section": "Rúbrica del Proyecto de Series de Tiempo con Prophet",
    "text": "Rúbrica del Proyecto de Series de Tiempo con Prophet\n\n\n\n\n\n\n\n\n\n\nPuntos de Evaluación\nNivel 1\nNivel 2\nNivel 3\nNivel 4\n\n\n\n\nCalidad del análisis exploratorio de datos y las conclusiones extraídas\nEl análisis exploratorio de datos es inexistente o muy limitado, sin conclusiones significativas.\nEl análisis exploratorio de datos es básico, con algunas conclusiones pero falta profundidad o comprensión completa de los datos.\nEl análisis exploratorio de datos es sólido, con conclusiones bien razonadas y una buena comprensión de los datos.\nEl análisis exploratorio de datos es excepcionalmente detallado y perspicaz, con conclusiones profundas y una comprensión completa de los datos.\n\n\nCorrecta aplicación de Prophet y uso de sus funcionalidades\nProphet no se utiliza correctamente o no se utiliza en absoluto.\nProphet se utiliza de manera básica, pero no se explotan todas sus funcionalidades.\nProphet se utiliza correctamente y se explotan la mayoría de sus funcionalidades.\nProphet se utiliza de manera experta, aprovechando todas sus funcionalidades para mejorar el modelo.\n\n\nPrecisión de los pronósticos\nLos pronósticos son inexactos y el modelo no se ajusta bien a los datos.\nLos pronósticos son moderadamente precisos, pero el modelo podría mejorarse.\nLos pronósticos son precisos y el modelo se ajusta bien a los datos.\nLos pronósticos son extremadamente precisos y el modelo se ajusta excepcionalmente bien a los datos.\n\n\nInterpretación de los componentes del modelo\nNo se realiza ninguna interpretación de los componentes del modelo.\nSe realiza una interpretación básica de algunos componentes del modelo.\nSe realiza una interpretación sólida de la mayoría de los componentes del modelo.\nSe realiza una interpretación detallada y perspicaz de todos los componentes del modelo.\n\n\nCalidad de la presentación de sus resultados\nLos resultados no se presentan de manera clara o comprensible.\nLos resultados se presentan de manera básica, pero podrían mejorarse para una mayor claridad o comprensión.\nLos resultados se presentan de manera clara y comprensible.\nLos resultados se presentan de manera excepcionalmente clara, detallada y comprensible."
  },
  {
    "objectID": "data_science_ingemat/modulo2/introduccion.html",
    "href": "data_science_ingemat/modulo2/introduccion.html",
    "title": "Introducción",
    "section": "",
    "text": "Introducción a las Series de Tiempo\nUna serie de tiempo es una secuencia de observaciones tomadas secuencialmente en el tiempo. Es una herramienta esencial en el análisis de datos temporales y se utiliza en muchos campos, como la economía, las ciencias sociales, la física, y la ingeniería.\n\nDefinición Formal\nFormalmente, una serie de tiempo puede ser vista como un conjunto de puntos de datos indexados (o listados o graficados) en el orden del tiempo. Generalmente, una serie de tiempo se representa como:\nX = {X1, X2,..., Xt,..., Xn}\ndonde Xt representa la observación en el tiempo t.\n\n\nAplicaciones de las Series de Tiempo\nLas series de tiempo se utilizan en una amplia variedad de aplicaciones, incluyendo:\n\nEconomía: para el análisis de indicadores económicos, como el producto interno bruto, la inflación, las tasas de desempleo, etc.\nFinanzas: para el seguimiento y la predicción de los precios de las acciones, las tasas de interés, y otros indicadores financieros.\nMeteorología: para predecir el clima y los patrones climáticos.\nCiencias de la Salud: para rastrear la propagación de enfermedades o la eficacia de un tratamiento a lo largo del tiempo.\n\n\n\nClasificación de las Series de Tiempo\nLas series de tiempo pueden ser clasificadas de acuerdo a su estructura en:\n\nSeries de Tiempo Estacionarias: Estas series tienen propiedades que no dependen del tiempo. En otras palabras, poseen una media y una varianza constantes a lo largo del tiempo.\nSeries de Tiempo No Estacionarias: Estas series muestran tendencias y/o patrones estacionales. No tienen una media y/o varianza constantes a lo largo del tiempo.\nSeries de Tiempo Estacionales: Estas son un tipo especial de series no estacionarias que exhiben una tendencia estacional, es decir, un patrón que se repite en intervalos de tiempo específicos."
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\nHi 👋, I’m Sebastián Azócar\n",
    "section": "",
    "text": "Hi 👋, I’m Sebastián Azócar\n\n\nData Scientist and Teacher\n\n\n\n\nPerfil\n\n\n\n👋 Hi there, I’m a Mathematical Engineer and hold a Master’s degree in Data Science\n🏠 I’m currently living in Santiago, Chile.\n🌐 I love traveling and visiting different countries.\n📚 I’m always learning and have a special interest in data analysis.\n📫 How to reach me: hizocar@gmail.com\n\n\nConnect with me:\n\n\n  \n\n\nLanguages and Tools:"
  },
  {
    "objectID": "personal/academica.html",
    "href": "personal/academica.html",
    "title": "Experiencia Académica",
    "section": "",
    "text": "About this site"
  },
  {
    "objectID": "data_science_ingemat/programa.html",
    "href": "data_science_ingemat/programa.html",
    "title": "Programa",
    "section": "",
    "text": "Objetivos Generales:\n\nDesarrollar habilidades avanzadas en ciencia de datos aplicadas en Python.\nFamiliarizar a los estudiantes con técnicas avanzadas de aprendizaje automático.\nCapacitar a los estudiantes en el uso de herramientas avanzadas para el análisis de datos en tiempo real.\nPromover la capacidad de los estudiantes para aplicar técnicas de análisis de datos en problemas del mundo real.\n\n\n\nMódulo 1: Sistemas de Recomendación\n\nIntroducción a los sistemas de recomendación.\nFamiliarización con las técnicas de filtrado colaborativo y basado en contenido.\nImplementación de sistemas de recomendación utilizando Python y la biblioteca de ciencia de datos de Pandas.\nEvaluación del rendimiento de los sistemas de recomendación.\n\n\n\nMódulo 2: Series de Tiempo con Prophet\n\nIntroducción a las series de tiempo y sus aplicaciones en la ciencia de datos.\nFamiliarización con la biblioteca Prophet de Facebook para el análisis de series de tiempo.\nImplementación de técnicas avanzadas de análisis de series de tiempo, como la descomposición y la modelización de tendencias y estacionalidad.\nEvaluación del rendimiento del modelo.\n\n\n\nMódulo 3: Teoría de Colas aplicado en Python\n\nIntroducción a la teoría de colas y sus aplicaciones en la ciencia de datos.\nFamiliarización con las técnicas avanzadas de análisis de colas, como la ley de Little y la teoría de colas de Jackson.\nImplementación de modelos de teoría de colas utilizando Python y la biblioteca de ciencia de datos de NumPy.\nEvaluación del rendimiento del modelo.\n\n\n\nMetodología y estructura del curso:\n\nEl curso tendrá una duración de un semestre.\nCada semana, se realizará un quiz corto para evaluar el progreso de los estudiantes.\nLos estudiantes trabajarán en un proyecto de ciencia de datos a lo largo del semestre.\nLa evaluación será con una proporción del 50% promedio de quiz y un 50% proyecto."
  },
  {
    "objectID": "data_science_ingemat/modulo2/prophet.html",
    "href": "data_science_ingemat/modulo2/prophet.html",
    "title": "Prophet",
    "section": "",
    "text": "Prophet es una biblioteca de Python desarrollada por Facebook que se utiliza para la predicción de series temporales. Prophet es especialmente útil para los casos de uso que tienen patrones estacionales fuertes y varias temporadas de datos históricos. Prophet también es robusto ante los datos faltantes y los cambios en la tendencia, y normalmente maneja bien los valores atípicos.\nLa biblioteca Prophet intenta capturar la tendencia y la estacionalidad al ajustar un modelo aditivo donde las observaciones no negativas se describen como la suma de los componentes. El objetivo de Prophet es hacer que las predicciones de series temporales sean escalables y automatizadas.\nA continuación, enumeraremos y describiremos brevemente algunas de las principales funciones que ofrece la biblioteca Prophet.\n\n\n\nProphet(): Esta es la clase principal de la biblioteca Prophet. Se utiliza para crear un objeto de Prophet que luego se puede ajustar a los datos de la serie temporal y se utiliza para hacer predicciones.\nfit(): Este método se utiliza para ajustar el modelo Prophet a los datos de la serie temporal. Se debe llamar antes de hacer predicciones.\nmake_future_dataframe(): Este método se utiliza para crear un DataFrame de Pandas de fechas futuras para las cuales hacer predicciones.\npredict(): Este método se utiliza para hacer predicciones. Se puede llamar después de ajustar el modelo Prophet a los datos de la serie temporal.\nplot() y plot_components(): Estos métodos se utilizan para visualizar las predicciones y los componentes del modelo Prophet.\nadd_seasonality(): Este método se utiliza para agregar estacionalidad personalizada al modelo Prophet.\nadd_country_holidays(): Este método se utiliza para agregar las vacaciones de un país específico al modelo Prophet.\n\n\n\n\nCrea una jupyter notebook con una data sintetica u otra a elección que simule una serie de tiempo. Usa cada función expuesta anteriormente y comenta los resultados"
  },
  {
    "objectID": "data_science_ingemat/modulo2/prophet.html#tarea-2",
    "href": "data_science_ingemat/modulo2/prophet.html#tarea-2",
    "title": "Prophet",
    "section": "",
    "text": "Crea una jupyter notebook con una data sintetica u otra a elección que simule una serie de tiempo. Usa cada función expuesta anteriormente y comenta los resultados"
  },
  {
    "objectID": "data_science_ingemat/modulo2/estacionaria.html",
    "href": "data_science_ingemat/modulo2/estacionaria.html",
    "title": "Estacionariedad",
    "section": "",
    "text": "Una serie de tiempo es considerada estacionaria si cumple con las siguientes propiedades estadísticas a lo largo del tiempo:\n\nTiene una media constante.\nTiene una varianza constante.\nLa covarianza entre los dos periodos (por ejemplo, t y t+m) depende solo de la diferencia m y no del tiempo t.\n\nFormalmente, una serie de tiempo {Xt} se considera estrictamente estacionaria si la distribución conjunta de (Xt1, Xt2, …, Xtk) es la misma que la de (Xt1+h, Xt2+h, …, Xtk+h) para cualquier elección de los tiempos t1, t2, …, tk y para cada desplazamiento h.\n\n\nExisten varias técnicas para determinar si una serie de tiempo es estacionaria. Algunas de las más populares incluyen:\n\nPrueba de Dickey-Fuller aumentada (ADF): Esta prueba hipotetiza que una serie de tiempo es no estacionaria (tiene alguna forma de raíz unitaria). Un resultado de prueba que rechaza esta hipótesis indica que la serie es estacionaria.\nPrueba de KPSS (Kwiatkowski-Phillips-Schmidt-Shin): A diferencia de la prueba ADF, la prueba KPSS hipotetiza que una serie de tiempo es estacionaria. Un resultado de prueba que rechaza esta hipótesis indica que la serie no es estacionaria.\n\n\n\n\nLa prueba de Dickey-Fuller Aumentada es una prueba de raíz unitaria en la presencia de estructura de serie autocorrelacionada. Para una serie de tiempo \\(y_t\\), la versión básica de la prueba de Dickey-Fuller considera la siguiente regresión de primer orden:\n\\(Δy_t = α + βt + γy_{t-1} + ε_t\\)\nLa hipótesis nula es que \\(γ = 0\\) (la serie tiene una raíz unitaria), mientras que la alternativa es \\(γ &lt; 0\\) (la serie es estacionaria). Para la versión aumentada de la prueba, se agregan términos de rezago de la serie diferenciada a la derecha de la ecuación de regresión para eliminar la autocorrelación en los errores (\\(ε_t\\)):\n\\(Δy_t = α + βt + γy_{t-1} + δ1Δy_{t-1} + … + δ_{p-1}Δy_{t-p+1} + ε_t\\)\n\n\n\nLa prueba KPSS es una prueba de hipótesis para probar la estacionariedad de una serie de tiempo (hipótesis nula) contra la presencia de una raíz unitaria (hipótesis alternativa).\nPara una serie de tiempo \\(y_t\\), la prueba KPSS considera la siguiente ecuación de regresión:\n\\(y_t = α + βt + St + ε_t\\)\ndonde \\(St\\) es una caminata aleatoria, que puede ser estocástica o determinística.\nLa hipótesis nula es que la serie es estacionaria (o trend-estacionaria), mientras que la alternativa es que la serie tiene una raíz unitaria.\n\n\n\nSerie Estacionaria: Las variaciones diarias de la temperatura (alrededor de la media) podrían ser consideradas como una serie estacionaria, ya que podríamos esperar que la variación media en la temperatura no cambie mucho de un día a otro.\nSerie No Estacionaria: El precio de una acción en el mercado es un ejemplo de una serie no estacionaria, ya que tiende a seguir una tendencia ascendente o descendente y no oscila alrededor de una constante.\n\nPara implementar pruebas de estacionariedad en Python, puedes usar la biblioteca statsmodels."
  },
  {
    "objectID": "data_science_ingemat/modulo2/estacionaria.html#series-de-tiempo-estacionarias",
    "href": "data_science_ingemat/modulo2/estacionaria.html#series-de-tiempo-estacionarias",
    "title": "Estacionariedad",
    "section": "",
    "text": "Una serie de tiempo es considerada estacionaria si cumple con las siguientes propiedades estadísticas a lo largo del tiempo:\n\nTiene una media constante.\nTiene una varianza constante.\nLa covarianza entre los dos periodos (por ejemplo, t y t+m) depende solo de la diferencia m y no del tiempo t.\n\nFormalmente, una serie de tiempo {Xt} se considera estrictamente estacionaria si la distribución conjunta de (Xt1, Xt2, …, Xtk) es la misma que la de (Xt1+h, Xt2+h, …, Xtk+h) para cualquier elección de los tiempos t1, t2, …, tk y para cada desplazamiento h.\n\n\nExisten varias técnicas para determinar si una serie de tiempo es estacionaria. Algunas de las más populares incluyen:\n\nPrueba de Dickey-Fuller aumentada (ADF): Esta prueba hipotetiza que una serie de tiempo es no estacionaria (tiene alguna forma de raíz unitaria). Un resultado de prueba que rechaza esta hipótesis indica que la serie es estacionaria.\nPrueba de KPSS (Kwiatkowski-Phillips-Schmidt-Shin): A diferencia de la prueba ADF, la prueba KPSS hipotetiza que una serie de tiempo es estacionaria. Un resultado de prueba que rechaza esta hipótesis indica que la serie no es estacionaria.\n\n\n\n\nLa prueba de Dickey-Fuller Aumentada es una prueba de raíz unitaria en la presencia de estructura de serie autocorrelacionada. Para una serie de tiempo \\(y_t\\), la versión básica de la prueba de Dickey-Fuller considera la siguiente regresión de primer orden:\n\\(Δy_t = α + βt + γy_{t-1} + ε_t\\)\nLa hipótesis nula es que \\(γ = 0\\) (la serie tiene una raíz unitaria), mientras que la alternativa es \\(γ &lt; 0\\) (la serie es estacionaria). Para la versión aumentada de la prueba, se agregan términos de rezago de la serie diferenciada a la derecha de la ecuación de regresión para eliminar la autocorrelación en los errores (\\(ε_t\\)):\n\\(Δy_t = α + βt + γy_{t-1} + δ1Δy_{t-1} + … + δ_{p-1}Δy_{t-p+1} + ε_t\\)\n\n\n\nLa prueba KPSS es una prueba de hipótesis para probar la estacionariedad de una serie de tiempo (hipótesis nula) contra la presencia de una raíz unitaria (hipótesis alternativa).\nPara una serie de tiempo \\(y_t\\), la prueba KPSS considera la siguiente ecuación de regresión:\n\\(y_t = α + βt + St + ε_t\\)\ndonde \\(St\\) es una caminata aleatoria, que puede ser estocástica o determinística.\nLa hipótesis nula es que la serie es estacionaria (o trend-estacionaria), mientras que la alternativa es que la serie tiene una raíz unitaria.\n\n\n\nSerie Estacionaria: Las variaciones diarias de la temperatura (alrededor de la media) podrían ser consideradas como una serie estacionaria, ya que podríamos esperar que la variación media en la temperatura no cambie mucho de un día a otro.\nSerie No Estacionaria: El precio de una acción en el mercado es un ejemplo de una serie no estacionaria, ya que tiende a seguir una tendencia ascendente o descendente y no oscila alrededor de una constante.\n\nPara implementar pruebas de estacionariedad en Python, puedes usar la biblioteca statsmodels."
  },
  {
    "objectID": "data_science_ingemat/modulo2/estacionaria.html#tarea-1-jupyter-notebook",
    "href": "data_science_ingemat/modulo2/estacionaria.html#tarea-1-jupyter-notebook",
    "title": "Estacionariedad",
    "section": "Tarea 1: Jupyter Notebook",
    "text": "Tarea 1: Jupyter Notebook\nAhora debes poner manos a la obra y completar el siguiente notebook: Notebook 1 de Series de Tiempo"
  }
]